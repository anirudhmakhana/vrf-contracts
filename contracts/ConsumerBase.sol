// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

import {GelatoVRFConsumer} from "contracts/Consumer.sol";
import {GelatoVRFInbox} from "contracts/Inbox.sol";

/// @title GelatoVRFConsumerBase
/// @dev This contract handles domain separation between consecutive randomness requests
abstract contract GelatoVRFConsumerBase is GelatoVRFConsumer {
    uint64 private __requestIdCounter = 1;

    function _inbox() internal view virtual returns (GelatoVRFInbox);

    function _operator() internal view virtual returns (address);

    function _requestRandomness(
        bytes memory extraData
    ) internal returns (uint64 requestId) {
        requestId = __requestIdCounter++;
        bytes memory data = abi.encode(requestId, extraData);
        _inbox().requestRandomness(this, data);
    }

    function _fulfillRandomness(
        bytes32 seed,
        uint64 requestId,
        bytes memory extraData
    ) internal virtual;

    /// @notice Callback function used by Gelato VRF to return the random number.
    /// @param randomness The random number generated by Gelato VRF.
    /// @param data Additional data provided by Gelato VRF, typically containing request details.
    function fulfillRandomness(
        uint256 randomness,
        bytes calldata data
    ) external {
        require(msg.sender == _operator());
        (uint64 requestId, bytes memory extraData) = abi.decode(
            data,
            (uint64, bytes)
        );
        bytes32 seed = keccak256(abi.encode(randomness, requestId));
        _fulfillRandomness(seed, requestId, extraData);
    }
}
